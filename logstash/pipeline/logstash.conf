input {
  # File input for local environments
  file {
    path => "/var/log/api-services/*.log"
    codec => "json"
    tags => ["file_input"]
  }
  
  # HTTP input for direct API logs
  http {
    port => 8080
    codec => "json"
    tags => ["http_input"]
  }
  
  # Beat input (for Filebeat)
  beats {
    port => 5044
    tags => ["beats_input"]
  }
}

filter {
  # Parse JSON if not already parsed
  if [type] == "file" {
    json {
      source => "message"
    }
  }
  
  # Add environment type based on tags or log content
  if [tags] =~ "on_prem" {
    mutate {
      add_field => { "environment_type" => "on_premises" }
    }
  } else if [tags] =~ "aws" {
    mutate {
      add_field => { "environment_type" => "aws_cloud" }
    }
  } else if [tags] =~ "azure" {
    mutate {
      add_field => { "environment_type" => "azure_cloud" }
    }
  } else {
    mutate {
      add_field => { "environment_type" => "unknown" }
    }
  }
  
  # Standardize timestamp format
  date {
    match => ["timestamp", "ISO8601"]
    target => "@timestamp"
    remove_field => ["timestamp"]
  }
  
  # Extract API metrics
  if [api_details] {
    # Move fields to root level for easier querying
    mutate {
      rename => {
        "[api_details][method]" => "http_method"
        "[api_details][endpoint]" => "endpoint"
        "[api_details][status_code]" => "status_code"
        "[api_details][duration_ms]" => "response_time"
      }
    }
    
    # Add status category
    if [status_code] {
      if [status_code] < 400 {
        mutate {
          add_field => { "status_category" => "success" }
        }
      } else if [status_code] < 500 {
        mutate {
          add_field => { "status_category" => "client_error" }
        }
      } else {
        mutate {
          add_field => { "status_category" => "server_error" }
        }
      }
    }
  }
  
  # Geolocate IP addresses if present
  if [source_ip] {
    geoip {
      source => "source_ip"
      target => "geo"
    }
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "api-logs-%{+YYYY.MM.dd}"
    
    # Use request_id as document ID if available to avoid duplicates
    document_id => "%{[request_id]}"
    
    # Add template for mapping
    template => "/etc/logstash/templates/api-logs-template.json"
    template_name => "api-logs"
    template_overwrite => true
  }
  
  # Debug output (commented for production)
  # stdout { codec => rubydebug }
}